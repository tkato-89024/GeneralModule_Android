apply plugin: 'com.android.library'

import java.util.regex.Pattern

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildToolsVersion

    defaultConfig {
        minSdkVersion             buildConfig.minSdk
        targetSdkVersion          buildConfig.targetSdk
        // versionCode               buildConfig.versionCode
        versionName               buildConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            // ライブラリのため、難読化解除
            // minifyEnabled true
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 作成したaar内のclasses.jarに画像ファイルを含める必要がなければこれで除外
    packagingOptions {
        exclude 'assets/*'
    }

    // region versionCode auto increment

    // AndroidManifest に versionCode の記述が必要

    // Debugビルドでエラーが出ないようにReleaseビルドの時のみ上記のタスクを実行
    tasks.whenTaskAdded { task ->
        if(task.name == 'uploadArchives') {
            task.dependsOn 'incrementVersionCode'
        }
    }

    task("incrementVersionCode") {
        doLast {
            overwriteVersionCode('src/main/AndroidManifest.xml')
            overwriteVersionCode('src/androidTest/AndroidManifest.xml')
        }
    }

    ext.overwriteVersionCode = { path ->
        def manifestFile = file(path)
        def manifestText = manifestFile.getText()
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def resultManifest = matcher.replaceAll("versionCode=\"" + (++versionCode) + "\"")
        manifestFile.write(resultManifest)
    }

    // endregion versionCode auto increment

    // region modify aar name

    libraryVariants.all { variant ->
        variant.outputs.all {

            // variant.name: 'debug' or 'release'
            // println "variant.name = ${variant.name}"

            def str = outputFileName.toString()
            def idx = str.indexOf("-${variant.name}")
            // def len = str.length()

            def moduleName = str.substring(0, idx)

            // println "moduleName = ${moduleName}"

            def suffix
            if (variant.name == android.buildTypes.release.name) {
                suffix = "-${android.defaultConfig.versionName}.aar"
            } else {
                suffix = "-${variant.name}-${android.defaultConfig.versionName}.aar"
            }

            outputFileName = "${moduleName}${suffix}"

            // println "outputFileName  = ${outputFileName}"
        }
    }

    // endregion modify aar name
}

dependencies {
    // https://qiita.com/darquro/items/5fceff5cdfbad72e83cb
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])

    implementation ("androidx.appcompat:appcompat:${versions.appcompat}")
    testImplementation ("junit:junit:${versions.junit}")
    androidTestImplementation ("androidx.test.ext:junit:${versions.junitTest}")
    androidTestImplementation ("androidx.test.espresso:espresso-core:${versions.espresso}")

    implementation ("com.jakewharton.timber:timber:${versions.timber}")

    // Gson の代わりの Json 操作
    // - EntityReadWriter
    implementation ("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
}

// region maven repositories

def repo = new File(rootDir, "repository")

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository url:  "file://${repo.absolutePath}"
            pom.version    = buildConfig.versionName
            pom.groupId    = "jp.co.model.tkato"
            pom.artifactId = "general-module"
        }
    }
}

// endregion maven repositories

// region jacoco (code coverage option)
apply from: './jacoco.gradle'
// endregion jacoco (code coverage option)